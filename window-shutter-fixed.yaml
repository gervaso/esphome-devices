substitutions:
  device_name: "window-shutter"
  device_verbose_name: "Window Shutter"
  device_class: "shutter"
  pin_led1: GPIO0
  pin_button1: GPIO2
  pin_relay1: GPIO4
  pin_switch2n: GPIO5
  pin_sda: GPIO12
  pin_switch1n: GPIO13
  pin_scl: GPIO14
  pin_relay2: GPIO15
  pin_ade7953_i2c: GPIO16
  pin_temp: A0
  open_duration: 30s
  close_duration: 30s
  ota_password:
  fallback_hotspot_password:
  wifi1_ssid:
  wifi1_password:
  

esphome:
  name: "${device_name}"
  platform: ESP8266
  board: esp01_1m

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:
  safe_mode: true
  id: my_ota
  password: "${ota_password}"

wifi:
  ssid: ${wifi1_ssid}
  password: ${wifi1_password}
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: ${fallback_hotspot_password}

captive_portal:

time:
  - platform: sntp
    servers:
      - 10.80.80.1

# Enable Web server (optional).
web_server:
  port: 80

# Text sensors with general information.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_verbose_name} IP

i2c:
  sda: GPIO12
  scl: GPIO14

# Sensors with general information.
sensor:
  # Uptime sensor.
  #- platform: uptime
  #  name: ${device_verbose_name} Uptime

  # WiFi Signal sensor.
  #- platform: wifi_signal
  #  name: ${device_verbose_name} WiFi Signal
  #  update_interval: 60s
    
  - platform: ade7953_i2c
    irq_pin: ${pin_ade7953_i2c} # Prevent overheating by setting this
    #voltage:
    #  name: ${device_verbose_name} Voltage
    #  filters:
    #    - throttle: 5s
    # On the Shelly 2.5 channels are mixed ch1=B ch2=A
    current_a:
      name: ${device_verbose_name} Close Current
      id: close_current
      internal: true
    current_b:
      name: ${device_verbose_name} Open Current
      id: open_current
      internal: true
    active_power_a:
      name: ${device_verbose_name} Active Power Close
      id: close_power
      internal: true
      filters:
        - lambda: if (x < 2) return 0; else return x;
      # active_power_a is normal, so don't multiply by -1
    active_power_b:
      name: ${device_verbose_name} Active Power Open
      id: open_power
      internal: true
      # active_power_b is inverted, so multiply by -1
      filters:
        - multiply: -1
        - lambda: if (x < 2) return 0; else return x;
    update_interval: 0.5s

  - platform: ntc
    sensor: temp_resistance_reading
    name: ${device_verbose_name} Temperature
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      above: 90
      then: # Security shutdown by overheating
        - switch.turn_on: _shutdown
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
    internal: true
  - platform: adc
    id: temp_analog_reading
    pin: A0
    update_interval: 30s
    internal: true
  
  - platform: template
    name: ${device_verbose_name} Active Power
    id: total_active_power
    unit_of_measurement: W
    lambda: return (id(open_power).state + id(close_power).state);
    filters:
      multiply: 0.1
    update_interval: 1s
  
  - platform: total_daily_energy
    name: ${device_verbose_name} Daily Energy
    power_id: total_active_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
  
status_led:
  pin:
    number: GPIO0
    inverted: yes

binary_sensor:
  - platform: gpio
    pin: ${pin_switch2n}
    name: "Switch #2"
    internal: true
    id: switch2
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      lambda: |-
        auto call = id(shutter).make_call();
        if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_IDLE) {
          call.set_command_close();
        } else if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_OPENING) {
          call.set_command_stop();
        } else if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_CLOSING) {
          call.set_command_stop();
        }
        call.perform();

  - platform: gpio
    pin: ${pin_switch1n}
    name: "Switch #1"
    internal: true
    id: switch1
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      lambda: |-
        auto call = id(shutter).make_call();
        if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_IDLE) {
          call.set_command_open();
        } else if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_OPENING) {
          call.set_command_stop();
        } else if (id(shutter).current_operation == CoverOperation::COVER_OPERATION_CLOSING) {
          call.set_command_stop();
        }
        call.perform();

switch:
  - platform: shutdown
    id: _shutdown
    internal: true
    name: ${device_verbose_name} Shelly 2.5 Shutdown
  - platform: gpio
    pin: ${pin_relay1}
    name: "Relay #1"
    internal: true
    id: relay1
    interlock: &interlock_group [relay1, relay2]
    interlock_wait_time: 500ms

  - platform: gpio
    pin: ${pin_relay2}
    name: "Relay #2"
    internal: true
    id: relay2
    interlock: *interlock_group
    interlock_wait_time: 500ms

cover:
  - platform: current_based
    device_class: ${device_class}
    name: "${device_verbose_name} Shutter"
    id: shutter

    open_sensor: open_current
    open_moving_current_threshold: 0.04
    open_duration: ${open_duration}
    open_action:
      - switch.turn_on: relay1
    close_sensor: close_current
    close_moving_current_threshold: 0.04
    close_duration: ${close_duration}
    close_action:
      - switch.turn_on: relay2
    stop_action:
      - switch.turn_off: relay1
      - switch.turn_off: relay2
    obstacle_rollback: 30%
    start_sensing_delay: 1s
    malfunction_detection: true
    malfunction_action:
      then:
        - logger.log: "Malfunction detected. Relay welded."
