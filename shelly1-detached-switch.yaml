substitutions:
  device_name: "Switch Light Detached"

esphome:
  name: shelly1-detached
  platform: ESP8266
  board: modwifi

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  safe_mode: true
  id: my_ota
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid_not
  password: !secret wifi_key_not

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret fallback_hotspot_password

captive_portal:

# Enable Web server (optional).
web_server:
  port: 80

# Text sensors with general information.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${device_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    update_interval: 60s

# Shelly 1 detached switch config with fallback in case of wifi or api fail

switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO4
    id: shelly_relay
    # after reboot, keep the relay off. this prevents light turning on after a power outage
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: gpio
    name: ${device_name} Input
    internal: true
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_press:
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # toggle smart light if wifi and api are connected and relay is on
              then:
                - homeassistant.service:
                    service: input_boolean.toggle
                    data:
                      entity_id: input_boolean.house_alarm_clock
              # else, toggle relay
              else:
                - switch.toggle: shelly_relay
    id: button